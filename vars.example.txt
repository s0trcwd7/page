     1  # Easy-RSA 3 parameter settings
       
     2  # NOTE: If you installed Easy-RSA from your package manager, do not edit
     3  # this file in place -- instead, you should copy the entire easy-rsa directory
     4  # to another location so future upgrades do not wipe out your changes.
       
     5  # HOW TO USE THIS FILE
     6  #
     7  # vars.example contains built-in examples to Easy-RSA settings. You MUST name
     8  # this file "vars" if you want it to be used as a configuration file. If you
     9  # do not, it WILL NOT be automatically read when you call easyrsa commands.
    10  #
    11  # It is not necessary to use this config file unless you wish to change
    12  # operational defaults. These defaults should be fine for many uses without
    13  # the need to copy and edit the "vars" file.
    14  #
    15  # All of the editable settings are shown commented and start with the command
    16  # "set_var" -- this means any set_var command that is uncommented has been
    17  # modified by the user. If you are happy with a default, there is no need to
    18  # define the value to its default.
       
    19  # NOTES FOR WINDOWS USERS
    20  #
    21  # Paths for Windows  *MUST* use forward slashes, or optionally double-escaped
    22  # backslashes (single forward slashes are recommended.) This means your path
    23  # to the openssl binary might look like this:
    24  # "C:/Program Files/OpenSSL-Win32/bin/openssl.exe"
       
    25  # A little housekeeping: DO NOT EDIT THIS SECTION
    26  #
    27  # Easy-RSA 3.x does not source into the environment directly.
    28  # Complain if a user tries to do this:
    29  if [ -z "$EASYRSA_CALLER" ]; then
    30          echo "You appear to be sourcing an Easy-RSA *vars* file. This is" >&2
    31          echo "no longer necessary and is disallowed. See the section called" >&2
    32          echo "*How to use this file* near the top comments for more details." >&2
    33          return 1
    34  fi
       
    35  # DO YOUR EDITS BELOW THIS POINT
       
    36  # This variable is used as the base location of configuration files needed by
    37  # easyrsa.  More specific variables for specific files (eg: EASYRSA_SSL_CONF)
    38  # may override this default.
    39  #
    40  # The default value of this variable is the location of the easyrsa script
    41  # itself, which is also where the configuration files are located in the
    42  # easy-rsa tree.
    43  #
    44  #set_var EASYRSA        "${0%/*}"
       
    45  # If your OpenSSL command is not in the system PATH, you will need to define
    46  # the path here. Normally this means a full path to the executable, otherwise
    47  # you could have left it undefined here and the shown default would be used.
    48  #
    49  # Windows users, remember to use paths with forward-slashes (or escaped
    50  # back-slashes.) Windows users should declare the full path to the openssl
    51  # binary here if it is not in their system PATH.
    52  #
    53  #set_var EASYRSA_OPENSSL        "openssl"
    54  #
    55  # This sample is in Windows syntax -- edit it for your path if not using PATH:
    56  #set_var EASYRSA_OPENSSL        "C:/Program Files/OpenSSL-Win32/bin/openssl.exe"
       
    57  # Edit this variable to point to your soon-to-be-created key directory.
    58  # By default, this will be "$PWD/pki" (ie: the "pki" subdirectory of the
    59  # directory you are currently in).
    60  #
    61  # WARNING: init-pki will do a rm -rf on this directory so make sure you define
    62  # it correctly!  Interactive mode will prompt before acting.
    63  #
    64  #set_var EASYRSA_PKI            "$PWD/pki"
       
    65  # Define directory for temporary subdirectories.
    66  #
    67  #set_var EASYRSA_TEMP_DIR       "$EASYRSA_PKI"
       
    68  # Define X509 DN mode.
    69  #
    70  # This is used to adjust which elements are included in the Subject field
    71  # as the DN ("Distinguished Name"). Note that in 'cn_only' mode the
    72  # Organizational fields, listed further below, are not used.
    73  #
    74  # Choices are:
    75  #   cn_only  - Use just a commonName value.
    76  #   org      - Use the "traditional" format:
    77  #              Country/Province/City/Org/Org.Unit/email/commonName
    78  #
    79  #set_var EASYRSA_DN     "cn_only"
       
    80  # Organizational fields (used with "org" mode and ignored in "cn_only" mode).
    81  # These are the default values for fields which will be placed in the
    82  # certificate.  Do not leave any of these fields blank, although interactively
    83  # you may omit any specific field by typing the "." symbol (not valid for
    84  # email).
    85  #
    86  # NOTE: The following characters are not supported
    87  #       in these "Organizational fields" by Easy-RSA:
    88  #       back-tick (`)
    89  #
    90  #set_var EASYRSA_REQ_COUNTRY    "US"
    91  #set_var EASYRSA_REQ_PROVINCE   "California"
    92  #set_var EASYRSA_REQ_CITY       "San Francisco"
    93  #set_var EASYRSA_REQ_ORG        "Copyleft Certificate Co"
    94  #set_var EASYRSA_REQ_EMAIL      "me@example.net"
    95  #set_var EASYRSA_REQ_OU         "My Organizational Unit"
       
    96  # Set no password mode - This will create the entire PKI without passwords.
    97  # This can be better managed by choosing which entity private keys should be
    98  # encrypted with the following command line options:
    99  # Global option '--no-pass' or command option 'nopass'.
   100  #
   101  #set_var EASYRSA_NO_PASS        1
       
   102  # Choose a size in bits for your keypairs. The recommended value is 2048.
   103  # Using 2048-bit keys is considered more than sufficient for many years into
   104  # the future. Larger keysizes will slow down TLS negotiation and make key/DH
   105  # param generation take much longer. Values up to 4096 should be accepted by
   106  # most software. Only used when the crypto alg is rsa, see below.
   107  #
   108  #set_var EASYRSA_KEY_SIZE       2048
       
   109  # The default crypto mode is rsa; ec can enable elliptic curve support.
   110  # Note that not all software supports ECC, so use care when enabling it.
   111  # Choices for crypto alg are: (each in lower-case)
   112  #  * rsa
   113  #  * ec
   114  #  * ed
   115  #
   116  #set_var EASYRSA_ALGO           rsa
       
   117  # Define the named curve, used in ec & ed modes:
   118  #
   119  #set_var EASYRSA_CURVE          secp384r1
       
   120  # In how many days should the root CA key expire?
   121  #
   122  #set_var EASYRSA_CA_EXPIRE      3650
       
   123  # In how many days should certificates expire?
   124  #
   125  #set_var EASYRSA_CERT_EXPIRE    825
       
   126  # How many days until the next CRL publish date?  Note that the CRL can still
   127  # be parsed after this timeframe passes. It is only used for an expected next
   128  # publication date.
   129  #
   130  #set_var EASYRSA_CRL_DAYS       180
       
   131  # Random serial numbers by default.
   132  # Set to 'no' for the old incremental serial numbers.
   133  #
   134  #set_var EASYRSA_RAND_SN        "yes"
       
   135  # Cut-off window for checking expiring certificates.
   136  #
   137  #set_var EASYRSA_CERT_RENEW     90
       
   138  # For fixed certificate start/end dates - Range 1..365
   139  #
   140  #set_var  EASYRSA_FIX_OFFSET 1
       
   141  # Support deprecated "Netscape" extensions? (choices "yes" or "no").
   142  # The default is "no", to discourage use of deprecated extensions.
   143  # If you require this feature to use with --ns-cert-type, set this to "yes".
   144  # This support should be replaced with the more modern --remote-cert-tls
   145  # feature.  If you do not use --ns-cert-type in your configs, it is safe,
   146  # and recommended, to leave this defined to "no".
   147  # When set to "yes", server-signed certs get the nsCertType=server attribute
   148  # and also get any NS_COMMENT defined below in the nsComment field.
   149  #
   150  #set_var EASYRSA_NS_SUPPORT     "no"
       
   151  # When NS_SUPPORT is set to "yes", this field is added as the nsComment field.
   152  # Set this blank to omit it. With NS_SUPPORT set to "no" this field is ignored.
   153  #
   154  #set_var EASYRSA_NS_COMMENT     "Easy-RSA Generated Certificate"
       
   155  # !!
   156  # NOTE: ADVANCED OPTIONS BELOW THIS POINT
   157  # PLAY WITH THEM AT YOUR OWN RISK
   158  # !!
       
   159  # Broken shell command aliases: If you have a largely broken shell that is
   160  # missing any of these POSIX-required commands used by Easy-RSA, you will need
   161  # to define an alias to the proper path for the command.  The symptom will be
   147  # When set to "yes", server-signed certs get the nsCertType=server attribute
   148  # and also get any NS_COMMENT defined below in the nsComment field.
   149  #
   150  #set_var EASYRSA_NS_SUPPORT     "no"

   151  # When NS_SUPPORT is set to "yes", this field is added as the nsComment field.
   152  # Set this blank to omit it. With NS_SUPPORT set to "no" this field is ignored.
   153  #
   154  #set_var EASYRSA_NS_COMMENT     "Easy-RSA Generated Certificate"

   155  # !!
   156  # NOTE: ADVANCED OPTIONS BELOW THIS POINT
   157  # PLAY WITH THEM AT YOUR OWN RISK
   158  # !!

   159  # Broken shell command aliases: If you have a largely broken shell that is
   160  # missing any of these POSIX-required commands used by Easy-RSA, you will need
   161  # to define an alias to the proper path for the command.  The symptom will be
   162  # some form of a "command not found" error from your shell. This means your
   163  # shell is BROKEN, but you can hack around it here if you really need. These
   164  # shown values are not defaults: it is up to you to know what you are doing if
   165  # you touch these.
   166  #
   167  #alias awk="/alt/bin/awk"
   168  #alias cat="/alt/bin/cat"

   169  # X509 extensions directory:
   170  # If you want to customize the X509 extensions used, set the directory to look
   171  # for extensions here. Each cert type you sign must have a matching filename,
   172  # and an optional file named "COMMON" is included first when present. Note that
   173  # when undefined here, default behaviour is to look in $EASYRSA_PKI first, then
   174  # fallback to $EASYRSA for the "x509-types" dir.  You may override this
   175  # detection with an explicit dir here.
   176  #
   177  #set_var EASYRSA_EXT_DIR        "$EASYRSA/x509-types"

   178  # Non-functional
   179  # If you want to generate KDC certificates, you need to set the realm here.
   180  #
   181  #set_var EASYRSA_KDC_REALM      "CHANGEME.EXAMPLE.COM"

   182  # OpenSSL config file:
   183  # If you need to use a specific openssl config file, you can reference it here.
   184  # Normally this file is auto-detected from a file named openssl-easyrsa.cnf
   185  # from the EASYRSA_PKI or EASYRSA dir, in that order. NOTE that this file is
   186  # Easy-RSA specific and you cannot just use a standard config file, so this is
   187  # an advanced feature.
   188  #
   189  #set_var EASYRSA_SSL_CONF       "$EASYRSA_PKI/openssl-easyrsa.cnf"

   190  # Cryptographic digest to use.
   191  # Do not change this default unless you understand the security implications.
   192  # Valid choices include: md5, sha1, sha256, sha224, sha384, sha512
   193  #
   194  #set_var EASYRSA_DIGEST         "sha256"

   195  # Batch mode. Leave this disabled unless you intend to call Easy-RSA explicitly
   196  # in batch mode without any user input, confirmation on dangerous operations,
   197  # or most output. Setting this to any non-blank string enables batch mode.
   198  #
   199  #set_var EASYRSA_BATCH          ""
